#!/usr/bin/env python

import argparse
from sys import exit, argv
from os import path,getenv,system
import PandaCore.Tools.job_management as jm

parser = argparse.ArgumentParser(description='simple condor submission')
parser.add_argument('--exec',dest='executable',help='executable',type=str)
parser.add_argument('--njobs',type=int)
parser.add_argument('--arglist',type=str,default=None)
parser.add_argument('--args',type=str,nargs='+',default=None)
parser.add_argument('--cache',type=str,default=None)
parser.add_argument('--dryrun',action='store_true')
parser.add_argument('--loud',action='store_true')
args = parser.parse_args()

argv = []
from PandaCore.Utils.logging import logger
jm.SILENT = not(args.loud)

if not args.cache:
    args.cache = '/data/t3serv014/{0}/submit/{1}/'.format(getenv('USER'),
                                           args.executable.split('/')[-1].replace('.',''))
system('rm -rf %s/*'%(args.cache))

if path.isfile(args.executable):
    args.executable = path.abspath(args.executable)

jm.setup_schedd('T3') # these types of jobs can only run locally

job_arguments = []
if args.arglist:
    with open(args.arglist) as fargs:
        for l in fargs:
            l = l.strip()
            if len(l)==0:
                continue
            job_arguments.append(l)
elif args.args:
    job_arguments = args.args
else:
    logger.error('submit','Please specify arguments!')
    exit(1)

jm.issue_proxy()
if args.njobs:
    nper = max(1,int(float(len(job_arguments))/args.njobs))
else:
    nper = 1

max_njobs = -1 if args.dryrun else None

sub = jm.SimpleSubmission(cache_dir=args.cache,
                          executable=args.executable,
                          arglist=job_arguments,
                          arguments=None,
                          nper=nper)
sub.execute(max_njobs)
sub.save()
logger.info('submit','Placed cache in '+args.cache)
